<!DOCTYPE html>
<html lang="en">
<head>

    <title>Homepage</title>



    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="description" content="">
    <meta name="keywords" content="">
    <meta name="author" content="Tooplate">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <link rel="stylesheet" href="../public/css/bootstrap.min.css">
    <link rel="stylesheet" href="../public/css/font-awesome.min.css">
    <link rel="stylesheet" href="../public/css/animate.css">
    <link rel="stylesheet" href="../public/css/owl.carousel.css">
    <link rel="stylesheet" href="../public/css/owl.theme.default.min.css">

    <!-- MAIN CSS -->
    <link rel="stylesheet" href="../public/css/tooplate-style.css">


</head>
<body id="top" data-spy="scroll" data-target=".navbar-collapse" data-offset="50">

<!-- PRE LOADER -->
<section class="preloader">
    <div class="spinner">

        <span class="spinner-rotate"></span>

    </div>
</section>


<!-- HEADER -->
<header>
    <div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-5">
                <p>Web-Based Game for Teaching Testing</p>
            </div>



        </div>
    </div>
</header>


<!-- MENU -->
<section class="navbar navbar-default navbar-static-top" role="navigation">
    <div class="container">

        <div class="navbar-header">
            <button class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon icon-bar"></span>
                <span class="icon icon-bar"></span>
                <span class="icon icon-bar"></span>
            </button>

            <!-- lOGO TEXT HERE -->
            <a href="/" class="navbar-brand"></i>Testing Game</a>
        </div>

        <!-- MENU LINKS -->
        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li><a href="/" class="smoothScroll">Home</a></li>
                <li><a href="/#team" class="smoothScroll">How to play</a></li>
                <li class="playBtn"><a href="/users/login">Play</a></li>
                <% if (user) { %>
                    <li role="presentation" class="smoothScroll"><a href="/users/logout">Logout</a></li>
                <% } %>

            </ul>
        </div>

    </div>
</section>


<section id="appointment" data-stellar-background-ratio="3">
    <div class="container">
        <div class="row">
            <h2>What is Mutation Testing?</h2>
            <p>Mutation Testing is a type of software testing where we mutate (change) certain statements in the source code and check if the test cases are able to find the errors. It is a type of White Box Testing which is mainly used for Unit Testing. The changes in mutant program are kept extremely small, so it does not affect the overall objective of the program.
            </p> <p></p>
            <p>The goal of Mutation Testing is to assess the quality of the test cases which should be robust enough to fail mutant code. This method is also called as Fault based testing strategy as it involves creating fault in the program
            </p><p></p>
            <h2>How to Perform Mutation Testing?</h2>
            <p>Step 1: Faults are introduced into the source code of the program by creating many versions called mutants. Each mutant should contain a single fault, and the goal is to cause the mutant version to fail which demonstrates the effectiveness of the test cases.</p><p></p>
            <p>Step 2: Test cases are applied to the original program and also to the mutant program. A Test Case should be adequate, and it is tweaked to detect faults in a program.</p><p></p>
            <p>Step 3: Compare the results of original and mutant program.</p><p></p>
            <p>Step 4: If the original program and mutant programs generate the different output, then that the mutant is killed by the test case. Hence the test case is good enough to detect the change between the original and the mutant program.</p><p></p>
            <p>Step 5: If the original program and mutant program generate same output, Mutant is kept alive. In such cases, more effective test cases need to be created that kill all mutants.</p><p></p>
            <h2>How to Create a Mutant Program?</h2>
            <p>A mutation is nothing but a single syntactic change that is made to the program statement. Each mutant program should differ from the original program by one mutation.</p><p></p>
            <p>For example: Changing: If (x > y) To: If (x < y)</p><p></p>
            <h2>Types of Mutation Testing</h2>
            <p>Mutation testing can be broadly classified into three – Value mutation, decision mutation and statement mutation.</p><p></p>
            <p>In value mutation, value of constants or parameters are changed. For example, value is changed to one larger or one smaller in loops, Initialization value is changed.</p><p></p>
            <p>Decision mutation – This helps to modify program code so that slip errors are reflected. For example, > a is changed to < a</p><p></p>
            <p>Statement mutation – In this type of testing, developer cuts and paste codes which might result in deletion of some statements of lines. This may also involve swapping the order of line of code. A line of code can be deleted/duplicated. Order of statements can also be changed.</p><p></p>

    </div>

    </div>
</section>



<!-- SCRIPTS -->
<script src="../public/js/jquery.js"></script>
<script src="../public/js/bootstrap.min.js"></script>
<script src="../public/js/jquery.sticky.js"></script>
<script src="../public/js/jquery.stellar.min.js"></script>
<script src="../public/js/wow.min.js"></script>
<script src="../public/js/smoothscroll.js"></script>
<script src="../public/js/owl.carousel.min.js"></script>
<script src="../public/js/custom.js"></script>
<script src="../public/js/btnClick.js"></script>

</body>
</html>